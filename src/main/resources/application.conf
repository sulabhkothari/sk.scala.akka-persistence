akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"
akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
    akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
    akka.persistence.journal.leveldb.dir = "target/localStores/journal"
    akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
    akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"
    akka.persistence.journal.leveldb.compaction-intervals {
        simple-persistent-actor = 1000  #persistenceID
        "*" = 5000
    }
}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5433/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }

  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
        java = "akka.serialization.JavaSerializer"
        rtjvm = "StoresAndSerialization.UserRegistrationSerializer"
    }

    serialization-bindings {
        "StoresAndSerialization.UserRegistered" = rtjvm
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    event-adapters {
        guitar-inventory-enhancer = "PersistencePatternsAndPractices.EventAdapters$GuitarReadEventAdapter"
    }

    event-adapter-bindings {
        "PersistencePatternsAndPractices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}

detachingModel {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
      event-adapters {
        guitar-inventory-enhancer = "PersistencePatternsAndPractices.ModelAdapter"
        }

        event-adapter-bindings {
            "PersistencePatternsAndPractices.DomainModel$CouponApplied" = guitar-inventory-enhancer
            "PersistencePatternsAndPractices.DataModel$WrittenCouponApplied" = guitar-inventory-enhancer
            "PersistencePatternsAndPractices.DataModel$WrittenCouponAppliedV2" = guitar-inventory-enhancer

        }
  }
}

persistenceQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

    cassandra-journal {
        event-adapters {
            tagging = "PersistencePatternsAndPractices.PersistenceQueryDemo$MusicStoreEventAdapter"
          }

          event-adapter-bindings {
              "PersistencePatternsAndPractices.PersistenceQueryDemo$PlaylistPurchased" = tagging
          }
    }
}